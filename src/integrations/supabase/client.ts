
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://amlirkbzqkbgbvrmgibf.supabase.co";
const SUPABASE_ANON_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFtbGlya2J6cWtiZ2J2cm1naWJmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0MDI1MzM1NywiZXhwIjoyMDU1ODI5MzU3fQ.aaL4_-zjVl9VQpKZ0bA3H-CJHPpSXMs0eRqKdQyart4";

// Try to get configuration from localStorage if it exists
const getStoredConfig = () => {
  try {
    const storedConfig = localStorage.getItem('supabase_config');
    if (storedConfig) {
      const config = JSON.parse(storedConfig);
      if (config.url && config.key) {
        // Ensure URL has protocol
        let url = config.url;
        if (!url.startsWith('http://') && !url.startsWith('https://')) {
          url = 'https://' + url;
        }
        return { url, key: config.key };
      }
    }
    return null;
  } catch (e) {
    console.error('Error reading stored Supabase config:', e);
    return null;
  }
};

// Use stored config if available, otherwise use the default
const config = getStoredConfig() || { 
  url: SUPABASE_URL, 
  key: SUPABASE_ANON_KEY 
};

// Create the Supabase client with retry logic
export const createSupabaseClient = () => {
  const { url, key } = config;
  
  const options = {
    auth: {
      autoRefreshToken: true,
      persistSession: true,
    },
    global: {
      fetch: (url: string, options: RequestInit) => {
        // Set timeout to 60 seconds
        const timeoutId = setTimeout(() => {
          console.error('Supabase request timeout');
        }, 60000);
        
        return fetch(url, {
          ...options,
          headers: {
            ...options.headers,
          }
        }).finally(() => {
          clearTimeout(timeoutId);
        });
      }
    }
  };
  
  return createClient<Database>(url, key, options);
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";
export const supabase = createSupabaseClient();
