
{
  "types": [
    "CREATE TYPE user_role AS ENUM ('admin', 'client', 'moderator')",
    "CREATE TYPE post_status AS ENUM ('draft', 'published', 'archived')",
    "CREATE TYPE component_status AS ENUM ('draft', 'published', 'archived')",
    "CREATE TYPE task_priority AS ENUM ('low', 'medium', 'high')",
    "CREATE TYPE task_status AS ENUM ('todo', 'in_progress', 'done')",
    "CREATE TYPE task_category AS ENUM ('bug', 'feature', 'maintenance', 'other')",
    "CREATE TYPE payment_status AS ENUM ('pending', 'completed', 'failed', 'refunded')",
    "CREATE TYPE invoice_status AS ENUM ('draft', 'pending', 'paid', 'overdue', 'cancelled')",
    "CREATE TYPE notification_type AS ENUM ('task_assigned', 'task_updated', 'deadline_approaching')",
    "CREATE TYPE form_status AS ENUM ('new', 'in_progress', 'completed')",
    "CREATE TYPE form_type AS ENUM ('bulk_consultation', 'custom_solutions', 'business_contact')",
    "CREATE TYPE reminder_recurrence AS ENUM ('none', 'daily', 'weekly', 'monthly')",
    "CREATE TYPE expense_status AS ENUM ('pending', 'approved', 'rejected')",
    "CREATE TYPE page_view_type AS ENUM ('page_view', 'file_view')",
    "CREATE TYPE supported_language AS ENUM ('en', 'fr', 'es')",
    "CREATE TYPE supported_currency AS ENUM ('USD', 'CAD', 'EUR')",
    "CREATE TYPE referral_status AS ENUM ('pending', 'completed', 'expired')",
    "CREATE TYPE flow_intensity AS ENUM ('light', 'medium', 'heavy')",
    "CREATE TYPE symptom_severity AS ENUM ('mild', 'moderate', 'severe')"
  ],
  "tables": [
    "CREATE TABLE IF NOT EXISTS profiles (id UUID PRIMARY KEY REFERENCES auth.users(id) ON DELETE CASCADE, email TEXT, full_name TEXT, phone_number TEXT, address TEXT, country TEXT, region TEXT, language supported_language DEFAULT 'en', currency TEXT DEFAULT 'USD', marketing_emails BOOLEAN DEFAULT false, email_notifications BOOLEAN DEFAULT false, completed_initial_setup BOOLEAN DEFAULT false, selected_delivery_method UUID, updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS user_roles (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE, role user_role NOT NULL DEFAULT 'client', created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS pages (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), title TEXT NOT NULL, slug TEXT NOT NULL, content JSONB NOT NULL DEFAULT '[]'::jsonb, content_blocks JSONB[] DEFAULT '{}'::jsonb[], is_published BOOLEAN DEFAULT false, parent_id UUID REFERENCES pages(id), menu_order INTEGER DEFAULT 0, menu_type TEXT DEFAULT 'main', show_in_header BOOLEAN DEFAULT false, show_in_footer BOOLEAN DEFAULT false, page_template TEXT DEFAULT 'default', allow_indexing BOOLEAN DEFAULT true, meta_title TEXT, meta_description TEXT, meta_keywords TEXT, canonical_url TEXT, custom_canonical_url TEXT, og_title TEXT, og_description TEXT, og_image TEXT, redirect_url TEXT, meta_robots TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()), updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS products (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), name TEXT NOT NULL, slug TEXT NOT NULL UNIQUE, description TEXT NOT NULL, price NUMERIC NOT NULL, image TEXT NOT NULL, media JSONB DEFAULT '[]'::jsonb, features TEXT[] DEFAULT '{}'::text[], specifications JSONB NOT NULL DEFAULT '{}'::jsonb, why_choose_features JSONB DEFAULT '[]'::jsonb, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()), updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS inventory (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), product_id UUID NOT NULL REFERENCES products(id), quantity INTEGER NOT NULL DEFAULT 0, sku TEXT, location TEXT, unit_cost NUMERIC DEFAULT 0, reorder_point INTEGER DEFAULT 50, optimal_stock INTEGER DEFAULT 200, low_stock_threshold INTEGER DEFAULT 100, last_counted_at TIMESTAMP WITH TIME ZONE, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()), updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS inventory_logs (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), product_id UUID NOT NULL REFERENCES products(id), quantity_change INTEGER NOT NULL, previous_quantity INTEGER NOT NULL, new_quantity INTEGER NOT NULL, reason_type TEXT NOT NULL, reason_details TEXT, adjustment_type TEXT, unit_cost NUMERIC, total_cost NUMERIC, reference_number TEXT, retailer_name TEXT, location TEXT, performed_by TEXT, created_by UUID REFERENCES profiles(id), created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS orders (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), user_id UUID REFERENCES profiles(id), profile_id UUID REFERENCES profiles(id), order_number TEXT NOT NULL, items JSONB NOT NULL, total_amount NUMERIC NOT NULL, shipping_cost NUMERIC DEFAULT 0, gst NUMERIC DEFAULT 0, status TEXT NOT NULL, shipping_address JSONB NOT NULL, billing_address JSONB NOT NULL, payment_method TEXT, stripe_session_id TEXT, applied_promo_code JSONB, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS payment_methods (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), name TEXT NOT NULL, description TEXT, is_active BOOLEAN DEFAULT true, processing_fee NUMERIC DEFAULT 0, icon_url TEXT, stripe_config JSONB DEFAULT '{}'::jsonb, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()), updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS delivery_methods (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), name TEXT NOT NULL, description TEXT, estimated_days TEXT, base_price NUMERIC DEFAULT 0, regions TEXT[] DEFAULT '{}'::text[], is_active BOOLEAN DEFAULT true, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()), updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))",
    "CREATE TABLE IF NOT EXISTS promo_codes (id UUID PRIMARY KEY DEFAULT uuid_generate_v4(), code TEXT NOT NULL, type TEXT NOT NULL, value NUMERIC NOT NULL, min_purchase_amount NUMERIC DEFAULT 0, start_date TIMESTAMP WITH TIME ZONE, end_date TIMESTAMP WITH TIME ZONE, max_uses INTEGER, uses_count INTEGER DEFAULT 0, is_active BOOLEAN DEFAULT true, description TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()), updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()))"
  ],
  "triggers": [
    "CREATE OR REPLACE FUNCTION public.handle_new_user() RETURNS trigger LANGUAGE plpgsql SECURITY DEFINER AS $function$ BEGIN INSERT INTO public.profiles (id, email, full_name) VALUES (new.id, new.email, COALESCE(new.raw_user_meta_data->>'full_name', '')); INSERT INTO public.user_roles (user_id, role) VALUES (new.id, 'client'); RETURN new; END; $function$",
    "CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user()",
    "CREATE OR REPLACE FUNCTION public.update_updated_at_column() RETURNS trigger LANGUAGE plpgsql AS $function$ BEGIN NEW.updated_at = timezone('utc'::text, now()); RETURN NEW; END; $function$",
    "CREATE TRIGGER update_products_updated_at BEFORE UPDATE ON products FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()",
    "CREATE TRIGGER update_pages_updated_at BEFORE UPDATE ON pages FOR EACH ROW EXECUTE FUNCTION update_updated_at_column()",
    "CREATE OR REPLACE FUNCTION public.update_inventory_after_purchase() RETURNS trigger LANGUAGE plpgsql AS $function$ BEGIN IF NEW.status = 'completed' THEN UPDATE inventory SET quantity = quantity - (SELECT COALESCE(SUM((items->>'quantity')::integer), 0) FROM jsonb_array_elements(NEW.items) as items) WHERE product_id = ANY (SELECT (items->>'id')::uuid FROM jsonb_array_elements(NEW.items) as items); END IF; RETURN NEW; END; $function$",
    "CREATE TRIGGER update_inventory_after_purchase AFTER INSERT OR UPDATE ON orders FOR EACH ROW EXECUTE FUNCTION update_inventory_after_purchase()"
  ]
}
