
import { Button } from "@/components/ui/button";
import { DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useState } from "react";
import { toast } from "sonner";
import { createClient } from '@supabase/supabase-js';

interface SupabaseConnectionStepProps {
  onNext: () => void;
  onBack: () => void;
}

export const SupabaseConnectionStep = ({ onNext, onBack }: SupabaseConnectionStepProps) => {
  const [projectId, setProjectId] = useState("");
  const [supabaseUrl, setSupabaseUrl] = useState("");
  const [supabaseKey, setSupabaseKey] = useState("");
  const [isConnecting, setIsConnecting] = useState(false);

  const updateConfig = async () => {
    try {
      // Update the Supabase client configuration
      const clientContent = `// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "${supabaseUrl}";
export const SUPABASE_PUBLISHABLE_KEY = "${supabaseKey}";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
`;
      
      const configContent = `project_id = "${projectId}"`;
      
      const clientResponse = await window.fetch('/api/lovable/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          files: [
            {
              path: 'integrations/supabase/client.ts',
              content: clientContent
            },
            {
              path: 'supabase/config.toml',
              content: configContent
            }
          ]
        }),
      });

      if (!clientResponse.ok) {
        console.error('Update response:', await clientResponse.text());
        throw new Error('Failed to update configuration files');
      }

      return true;
    } catch (error) {
      console.error('Failed to update config files:', error);
      return false;
    }
  };

  const verifyConnection = async (supabase: any) => {
    try {
      // Simply check if we can connect to Supabase using the auth API
      const { data, error } = await supabase.auth.getSession();
      if (error) throw error;
      return true;
    } catch (error: any) {
      console.error('Connection verification failed:', error);
      throw new Error('Could not connect to Supabase. Please check your credentials.');
    }
  };

  const executeSqlStatement = async (sql: string) => {
    try {
      // Clean up SQL statement by removing any extra whitespace
      const cleanSql = sql.trim();
      if (!cleanSql) return;

      console.log('Executing SQL:', cleanSql); // For debugging

      const result = await fetch(`${supabaseUrl}/rest/v1/rpc/create_table`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`,
          'Prefer': 'resolution=merge-duplicates'
        },
        body: JSON.stringify({
          sql: cleanSql
        })
      });

      if (!result.ok) {
        const errorData = await result.json();
        console.error('SQL execution error:', errorData);
        throw new Error(`Migration failed: ${JSON.stringify(errorData)}`);
      }

      return result;
    } catch (error) {
      console.error('SQL execution failed:', error);
      throw error;
    }
  };

  const runMigrations = async () => {
    try {
      // Get the SQL content from the migrations file
      const response = await fetch('/api/lovable/read?path=src/install/migrations/initial-setup.sql');
      if (!response.ok) {
        throw new Error('Failed to read migrations file');
      }
      const sqlContent = await response.text();
      
      // First, create the create_table RPC function
      const createRpcFunction = `
        CREATE OR REPLACE FUNCTION create_table(sql text)
        RETURNS void
        LANGUAGE plpgsql
        SECURITY DEFINER
        AS $$
        BEGIN
          EXECUTE sql;
        END;
        $$;
      `;
      
      // Execute it using raw SQL via Supabase client
      const supabase = createClient(supabaseUrl, supabaseKey);
      await supabase.rpc('create_table', { sql: createRpcFunction });
      
      // Split SQL content into statements, being careful to handle comments and empty lines
      const statements = sqlContent
        .split(';')
        .map(statement => statement.trim())
        .filter(statement => {
          // Remove SQL comments and empty statements
          const cleanStatement = statement
            .split('\n')
            .filter(line => !line.trim().startsWith('--'))
            .join('\n')
            .trim();
          return cleanStatement.length > 0;
        });
      
      // Execute each statement sequentially
      for (const statement of statements) {
        console.log('Executing statement:', statement); // For debugging
        await executeSqlStatement(statement);
        // Small delay between statements to prevent rate limiting
        await new Promise(resolve => setTimeout(resolve, 100));
      }

      // Wait briefly for migrations to complete
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      return true;
    } catch (error: any) {
      console.error('Migration failed:', error);
      throw new Error('Failed to set up database schema');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsConnecting(true);

    try {
      if (!projectId || !supabaseUrl || !supabaseKey) {
        toast.error("Please fill in all fields");
        return;
      }

      const supabase = createClient(supabaseUrl, supabaseKey);
      
      // Step 1: Verify basic connectivity
      await verifyConnection(supabase);
      console.log("Connection verified successfully");

      // Step 2: Update configuration files
      const configUpdated = await updateConfig();
      if (!configUpdated) {
        throw new Error("Failed to update configuration files");
      }
      console.log("Configuration updated successfully");
      
      // Step 3: Run migrations to set up database schema
      await runMigrations();
      console.log("Migrations completed successfully");
      
      toast.success("Database setup completed successfully!");
      onNext();
    } catch (error: any) {
      console.error('Setup failed:', error);
      toast.error(error.message || "Failed to complete setup");
    } finally {
      setIsConnecting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <DialogHeader>
        <DialogTitle>Connect to Supabase</DialogTitle>
        <DialogDescription>
          Enter your Supabase project details to connect the application.
          Make sure to use a fresh Supabase project without any existing tables.
        </DialogDescription>
      </DialogHeader>

      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="projectId">Project ID</Label>
          <Input
            id="projectId"
            value={projectId}
            onChange={(e) => setProjectId(e.target.value)}
            placeholder="Enter your Supabase project ID"
            className="rounded-full h-12"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="supabaseUrl">Supabase URL</Label>
          <Input
            id="supabaseUrl"
            value={supabaseUrl}
            onChange={(e) => setSupabaseUrl(e.target.value)}
            placeholder="https://your-project.supabase.co"
            className="rounded-full h-12"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="supabaseKey">Supabase Anon Key</Label>
          <Input
            id="supabaseKey"
            value={supabaseKey}
            onChange={(e) => setSupabaseKey(e.target.value)}
            placeholder="Enter your Supabase anon key"
            className="rounded-full h-12"
          />
        </div>
      </div>

      <div className="flex justify-between">
        <Button type="button" variant="outline" onClick={onBack}>
          Back
        </Button>
        <Button type="submit" disabled={isConnecting}>
          {isConnecting ? "Setting up project..." : "Next"}
        </Button>
      </div>
    </form>
  );
};
