
import { Button } from "@/components/ui/button";
import { DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { useState } from "react";
import { toast } from "sonner";
import { createClient } from '@supabase/supabase-js';

interface SupabaseConnectionStepProps {
  onNext: () => void;
  onBack: () => void;
  adminDetails: {
    email: string;
    password: string;
    fullName: string;
  };
}

export const SupabaseConnectionStep = ({ onNext, onBack, adminDetails }: SupabaseConnectionStepProps) => {
  const [projectId, setProjectId] = useState("");
  const [supabaseUrl, setSupabaseUrl] = useState("");
  const [supabaseKey, setSupabaseKey] = useState("");
  const [isConnecting, setIsConnecting] = useState(false);

  const updateConfig = async () => {
    try {
      const clientPath = '/src/integrations/supabase/client.ts';
      const clientContent = `// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

export const SUPABASE_URL = "${supabaseUrl}";
export const SUPABASE_PUBLISHABLE_KEY = "${supabaseKey}";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);
`;
      
      const response = await fetch('/api/update-config', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          path: clientPath,
          content: clientContent,
          projectId,
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to update configuration files');
      }

      return true;
    } catch (error) {
      console.error('Failed to update config files:', error);
      return false;
    }
  };

  const testConnection = async (url: string, key: string) => {
    try {
      const supabase = createClient(url, key);
      const { data, error } = await supabase.from('user_roles').select('*').limit(1);
      
      // If we can query user_roles, the database is already set up
      if (!error && data) {
        throw new Error('This Supabase project already has tables set up. Please use a fresh project.');
      }
      
      return supabase;
    } catch (error: any) {
      // If error is about relations not existing, that's good - means we have a fresh DB
      if (error?.message?.includes('relation "user_roles" does not exist')) {
        return createClient(url, key);
      }
      throw error;
    }
  };

  const setupDatabase = async (supabase: any) => {
    try {
      // Execute initial database setup
      const { error } = await supabase.rpc('create_types', {
        sql: `
          CREATE TYPE user_role AS ENUM ('admin', 'client');
          
          CREATE TABLE IF NOT EXISTS profiles (
            id UUID PRIMARY KEY,
            email TEXT,
            full_name TEXT,
            created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now())
          );
          
          CREATE TABLE IF NOT EXISTS user_roles (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            user_id UUID NOT NULL,
            role user_role NOT NULL DEFAULT 'client',
            created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()),
            UNIQUE(user_id, role)
          );
        `
      });

      if (error) throw error;
      return true;
    } catch (error) {
      console.error('Error setting up database:', error);
      return false;
    }
  };

  const createAdminUser = async (supabase: any) => {
    try {
      // Create the user in Supabase Auth
      const { data: authData, error: authError } = await supabase.auth.signUp({
        email: adminDetails.email,
        password: adminDetails.password,
        options: {
          data: {
            full_name: adminDetails.fullName
          }
        }
      });

      if (authError) throw authError;

      // The profile and user_role will be created automatically through database triggers
      return true;
    } catch (error: any) {
      console.error('Error creating admin user:', error);
      throw new Error(error.message || 'Failed to create admin user');
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsConnecting(true);

    try {
      if (!projectId || !supabaseUrl || !supabaseKey) {
        toast.error("Please fill in all fields");
        return;
      }

      // First test the connection and ensure it's a fresh project
      const supabase = await testConnection(supabaseUrl, supabaseKey);
      
      // Set up the database schema
      const dbSetup = await setupDatabase(supabase);
      if (!dbSetup) {
        throw new Error("Failed to set up database schema");
      }

      // Create the admin user
      await createAdminUser(supabase);

      // Update configuration files
      const configUpdated = await updateConfig();
      if (!configUpdated) {
        throw new Error("Failed to update configuration files");
      }

      toast.success("Installation completed successfully!");
      onNext();
    } catch (error: any) {
      toast.error(error.message || "Failed to complete installation");
    } finally {
      setIsConnecting(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <DialogHeader>
        <DialogTitle>Connect to Supabase</DialogTitle>
        <DialogDescription>
          Enter your Supabase project details to connect the application.
          Make sure to use a fresh Supabase project without any existing tables.
        </DialogDescription>
      </DialogHeader>

      <div className="space-y-4">
        <div className="space-y-2">
          <Label htmlFor="projectId">Project ID</Label>
          <Input
            id="projectId"
            value={projectId}
            onChange={(e) => setProjectId(e.target.value)}
            placeholder="Enter your Supabase project ID"
            className="rounded-full h-12"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="supabaseUrl">Supabase URL</Label>
          <Input
            id="supabaseUrl"
            value={supabaseUrl}
            onChange={(e) => setSupabaseUrl(e.target.value)}
            placeholder="https://your-project.supabase.co"
            className="rounded-full h-12"
          />
        </div>

        <div className="space-y-2">
          <Label htmlFor="supabaseKey">Supabase Anon Key</Label>
          <Input
            id="supabaseKey"
            value={supabaseKey}
            onChange={(e) => setSupabaseKey(e.target.value)}
            placeholder="Enter your Supabase anon key"
            className="rounded-full h-12"
          />
        </div>
      </div>

      <div className="flex justify-between">
        <Button type="button" variant="outline" onClick={onBack}>
          Back
        </Button>
        <Button type="submit" disabled={isConnecting}>
          {isConnecting ? "Setting up project..." : "Complete Setup"}
        </Button>
      </div>
    </form>
  );
};
